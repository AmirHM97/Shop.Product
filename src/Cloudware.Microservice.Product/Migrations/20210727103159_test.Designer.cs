// <auto-generated />
using System;
using Cloudware.Microservice.Product.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cloudware.Microservice.Product.Migrations
{
    [DbContext(typeof(ProductContext))]
    [Migration("20210727103159_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.ImageUrlItems", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ProductItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductItemId");

                    b.ToTable("ImageUrls");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.ProductBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.ProductItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Dimensions")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Story")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductItemId")
                        .HasColumnType("bigint");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductItemId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.PropertyItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Propid")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Propid");

                    b.ToTable("PropertyItems");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.StockItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("MaxCount")
                        .HasColumnType("bigint");

                    b.Property<long>("MinCount")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.StockPropertyItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("PropItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("StockId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PropItemId");

                    b.HasIndex("StockId");

                    b.ToTable("StockProperty");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.TechnicalProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("productItemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("productItemId");

                    b.ToTable("TechnicalProperty");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.ImageUrlItems", b =>
                {
                    b.HasOne("Cloudware.Microservice.Product.Model.ProductItem", "ProductItem")
                        .WithMany("ImageUrls")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.ProductCategory", b =>
                {
                    b.HasOne("Cloudware.Microservice.Product.Model.ProductCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.ProductItem", b =>
                {
                    b.HasOne("Cloudware.Microservice.Product.Model.ProductBrand", "Brand")
                        .WithMany("ProductItems")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cloudware.Microservice.Product.Model.ProductCategory", "Category")
                        .WithMany("ProductItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.Property", b =>
                {
                    b.HasOne("Cloudware.Microservice.Product.Model.ProductItem", "ProductItem")
                        .WithMany("PropertyItems")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.PropertyItem", b =>
                {
                    b.HasOne("Cloudware.Microservice.Product.Model.Property", "Prop")
                        .WithMany("PropItems")
                        .HasForeignKey("Propid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prop");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.StockItem", b =>
                {
                    b.HasOne("Cloudware.Microservice.Product.Model.ProductItem", "ProductItem")
                        .WithMany("StocksItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.StockPropertyItem", b =>
                {
                    b.HasOne("Cloudware.Microservice.Product.Model.PropertyItem", "PropItem")
                        .WithMany("StockPropertyItems")
                        .HasForeignKey("PropItemId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Cloudware.Microservice.Product.Model.StockItem", "Stock")
                        .WithMany("StockPropertyItems")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropItem");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.TechnicalProperty", b =>
                {
                    b.HasOne("Cloudware.Microservice.Product.Model.ProductItem", "ProductItem")
                        .WithMany("TechnicalProperties")
                        .HasForeignKey("productItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.ProductBrand", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.ProductCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.ProductItem", b =>
                {
                    b.Navigation("ImageUrls");

                    b.Navigation("PropertyItems");

                    b.Navigation("StocksItems");

                    b.Navigation("TechnicalProperties");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.Property", b =>
                {
                    b.Navigation("PropItems");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.PropertyItem", b =>
                {
                    b.Navigation("StockPropertyItems");
                });

            modelBuilder.Entity("Cloudware.Microservice.Product.Model.StockItem", b =>
                {
                    b.Navigation("StockPropertyItems");
                });
#pragma warning restore 612, 618
        }
    }
}
